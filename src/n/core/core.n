# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import @meta;

## Info-log the given value to stdout using the built-in INFO macro.
def $info!($value) => @ctrino.log_info!($value);

## The standard output stream connected to this process.
def $stdout := @ctrino.stdout;

## The standard error stream connected to this process.
def $stderr := @ctrino.stderr;

## The standard input stream connected to this process.
def $stdin := @ctrino.stdin;

## Error-log the given value to stdout using the vm's logging but with the
## output canonicalized. This will cause the vm execution to return a non-zero
## exit code.
def $error!($value) => @ctrino.log_error_canonical!($value);

## Print the given value to stdout, followed by a newline.
def $print_ln!($value) => @ctrino.print_ln!($value);

## Instance manager used within the core library.
def @manager := @ctrino.new_instance_manager(null);

## Freeze the given value.
def $freeze($value) => @ctrino.freeze($value);

## Is the given value frozen?
def $is_frozen?($value) => @ctrino.is_frozen?($value);

## Is the given value deep frozen?
def $is_deep_frozen?($value) => @ctrino.is_deep_frozen?($value);

## Delays the execution of the given lambda to a future turn, returning a
## promise for the eventual result.
def $delay($thunk) => @Promise.defer($thunk);

## Schedules the given thunk to be run after the object has been garbage
## collected. There is no guarantee how long it might take between the object
## being collected and the thunk being run. Also, not all objects will ever be
## collected.
##
## Note that if the thunk holds a reference to the object then this will prevent
## the object from ever being collected and hence prevent the thunk from ever
## being run. So be careful.
##
## Returns true iff the callback was successfully scheduled. The call will fail
## if the object does not have a well-defined lifetime. For instance, if you
## try to schedule a callback when the number 4 becomes garbage the call will
## return false because 4 always exists.
def $post_mortem($object, $thunk) => @ctrino.schedule_post_mortem($object, $thunk);
