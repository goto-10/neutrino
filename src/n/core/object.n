# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

## The common supertype of all the built-in types.
type @Object;

## Generic converter method that returns the internal string representation of
## the given object.
def ($this is @Object).to($target == @String) => @ctrino.to_string($this, false);

def ($this is @Object).to_canonical_string => @ctrino.to_string($this, true);

## Prints the internal representation of this object.
def ($this is @Object).print() => $this.to(@String).print_raw();

## Is this object the null value?
def ($this is @Object).is_null? => false;

## Performs the given operation on this value unless it is a promise in which
## case the operation will be performed when the promise has been resolved.
def ($this is @Object)->(*) as $args => @when_def($this, fn $v {
  def $new_args := $args
    .replace_argument(transport, sync)
    .replace_argument(subject, $v);
  module.invoke($new_args);
});

## Returns true if this object is identical to the given one. By default this
## means object identity which for user-defined objects means heap pointer
## equality. For some built-in families, for instance strings, true object
## identity cannot be observed from the surface language and identity is
## determined through structural comparison.
##
## User-defined types are free to override this -- it's not exactly recommended
## but it's fine to do.
@ctrino.builtin("obj.is_identical?()")
def ($this).is_identical?($that);

## Returns true if this object is equal to the given one, though not necessarily
## identical. By default this does use object identity but user-defined types
## should override this and provide whatever the appropriate equality is.
##
## Equality should be reflexive, symmetric, and transitive. Typically you'll
## want to guard both arguments the same way or, if the guards have to be
## different, have two methods one for @A == @B and @B == @A.
def ($this)==($that) => $this.is_identical?($that);

## If this is a collection, returns true if it shallowly structually equal to
## the argument. That is, if $this contains the same elements as $that in the
## appropriate sense for this type of collection, where element equality is
## determined using ==. The "appropriate sense" is intentionally vague since it
## necessarily depends on the type of collection. For sequences, for instance,
## it means that the elements not only have to be present but have to be in the
## same order. In an ordered collection it just means that the same elements
## have to be present.
##
## If this is not a collection it should work the same as ==.
##
## The asterisk in the operator is meant to parallel the Kleene star and
## indicate that we're dealing with (potentially) multiple elements.
##
## Collection equality should be reflexive, symmetric, and transitive. Typically
## you'll want to guard both arguments the same way or, if the guards have to be
## different, have two methods one for @A ==* @B and @B ==* @A.
def ($this)==*($that) => $this == $that;
