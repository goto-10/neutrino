# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

## The built-in type of runtime-native blocks.
def @Promise := @ctrino.get_builtin_type("Promise");

def type @Promise is @Object;

## Creates and returns a new unresolved promise.
def ($this == @Promise).new() => @ctrino.new_pending_promise();

## Creates and returns a new unresolved promise.
def ($this == @Promise).pending() => @ctrino.new_pending_promise();

## A detached signal is a wrapper created around a signal that has been caught
## and stored for later. If the signal is attached later on using .attached,
## which returns the signal, nothing happens but if it is never attached an
## error will be reported.
type @DetachedSignal {

  field $this.signal;
  field $this.attachment;

  ## Mark this signal as having been reattached and return the reified signal.
  ## This mutes logging the error.
  def $this.attach {
    (($this.attachment)[0]) := true;
    $this.signal;
  }

}

def $maybe_report_detached_signal($attachment, $trace) {
  @if($attachment[0], fn
    on.then! => null
    on.else! => $error!($trace));
}

def ($This == @DetachedSignal).new($signal, $trace) {
  def $result := @manager.new_instance(@DetachedSignal);
  def $attachment := [false];
  def $str_trace := $trace.to_canonical_string;
  $result.signal := $signal;
  $result.attachment := $attachment;
  $post_mortem($result, fn => $maybe_report_detached_signal($attachment, $str_trace));
  $result;
}

## Returns a value representing the state of the given promise, one of pending,
## fulfilled, and rejected.
@ctrino.builtin("promise.state")
def ($this is @Promise).state;

## Returns true iff this promise is in the fulfilled or rejected state.
@ctrino.builtin("promise.is_settled?")
def ($this is @Promise).is_settled?;

## Returns true iff this promise is in the fulfilled state.
@ctrino.builtin("promise.is_fulfilled?")
def ($this is @Promise).is_fulfilled?;

@ctrino.builtin("promise.fulfilled_value")
def ($this is @Promise).fulfilled_value;

@ctrino.builtin("promise.rejected_error")
def ($this is @Promise).rejected_error;

## Returns the value of this promise if it has been resolved, otherwise signals
## promise_not_resolved.
def ($this is @Promise).get => @if($this.is_settled?, fn
  on.then! => @if($this.is_fulfilled?, fn
    on.then! => $this.fulfilled_value
    on.else! => $this.rejected_error)
  on.else! => leave.promise_not_settled($this));

## Fulfills this promise. After this call the promise will return true for
## is_resolved? and get() will return the given value. If the promise is already
## resolved this call has no effect.
##
## TODO: maybe signal when the promise has already been resolved but by default
##   do nothing?
@ctrino.builtin("promise.fulfill!")
def ($this is @Promise).fulfill!($value);

## Fulfilling a promise with another promise will cause it to be fulfilled the
## same way as the other promise, rather than fulfilling it with the raw
## promise value which is not particularly useful. Or, if it does turn out to be
## useful we should probably introduce a separate concept from fulfilling to
## cover that.
def ($this is @Promise).fulfill!($other is @Promise) => $other.forward($this);

## TODO
@ctrino.builtin("promise.reject!")
def ($this is @Promise).reject!($args);

## Executes the given thunk eventually, after this promise has been resolved.
## If this promise fails the resulting promise will fail in the same way.
def ($this is @Promise).then($thunk) {
  def $result := new @Promise();
  @ctrino.delay(fn => @if($this.is_fulfilled?, fn
      on.then! => $forward_thunk($result, fn => $thunk($this.fulfilled_value))
      on.else! => $result.reject!($this.rejected_error)),
    $this);
  $result;
}

# Schedules the given promise to be settled the same way as this one.
def ($this is @Promise).forward($that) {
  @ctrino.delay(fn => @if($this.is_fulfilled?, fn
      on.then! => $that.fulfill!($this.fulfilled_value)
      on.else! => $that.reject!($this.rejected_error)),
    $this);
}

## Executes the given exception lambda with the failure arguments if this
## promise fails.
def ($this is @Promise).on($handler) {
  @ctrino.delay(fn => @if($this.is_fulfilled?, fn
      on.then! => null
      on.else! => module.invoke(subject: $handler, $this.rejected_error.attach)),
    $this);
}

## Executes the given thunk and resolves the given promise appropriately
## according to how the thunk completed.
def $forward_thunk($promise, $thunk) {
  try {
    $promise.fulfill!($thunk());
  } on(*) as $error {
    # We censor the stack trace so that the machinery below the call to the
    # thunk is hidden.
    def $trace := @ctrino.get_current_backtrace().remove_below(subject, $thunk);
    # Since we're capturing the signal and there is no guarantee that it will
    # be re-raised and handled we wrap it in a detached signal which will deal
    # with reporting an error in that case.
    $promise.reject!(new @DetachedSignal($error, $trace));
  }
}

## Execute the given thunk in a subsequent turn. Returns a promise for the
## result.
def ($This == @Promise).defer($thunk) {
  def $result := new @Promise();
  @ctrino.delay(fn => $forward_thunk($result, $thunk), null);
  $result;
}

def $schedule_join_promises($promises, $index, $values, $result) {
  @if($index == ($promises.length), fn
    on.then! => $result.fulfill!($values)
    on.else! {
      def $next := $promises[$index];
      @when_def($next, fn $value {
        $values[$index] := $value;
        $schedule_join_promises($promises, $index + 1, $values, $result);
      });
  });
}

## Given a list of promises, returns a promise that will be fulfilled when all
## the promises in the list have been with a tuple of the sub-promises' values.
def ($this == @Promise).join($promises) {
  def $values := new @Tuple($promises.length);
  def $result := new @Promise();
  $schedule_join_promises($promises, 0, $values, $result);
  $result;
}

## Executes $thunk when the given value has been resolved.
def @when_def($promise is @Promise, $thunk) => $promise.then($thunk);
def @when_def($value, $thunk) => $thunk($value);
