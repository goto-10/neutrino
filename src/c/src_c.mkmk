# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

# ls neutrino/src/c -1 | grep \\.c | sort
library_file_names = [
  "alloc.c",
  "behavior.c",
  "bind.c",
  "builtin.c",
  "codegen.c",
  "condition.c",
  "ctrino.c",
  "derived.c",
  "format.c",
  "freeze.c",
  "heap.c",
  "interp.c",
  "method.c",
  "method.cc",
  "plugin.c",
  "process.c",
  "runtime.c",
  "safe.c",
  "serialize.c",
  "sync.c",
  "syntax.c",
  "tagged.c",
  "utils.c",
  "value.c"
]

# All the objects for the library source files. It might make sense to create
# a real library at some point but for now this'll do.
library = get_group("library")
library.add_dependency(get_dep_external('tclib', 'src', 'c', 'async', 'library'))
library.add_dependency(get_dep_external('tclib', 'src', 'c', 'io', 'library'))
library.add_dependency(get_dep_external('tclib', 'src', 'c', 'sync', 'library'))
library.add_dependency(get_dep_external('plankton', 'src', 'c', 'library'))

# Add the source file objects to the library.
for library_file_name in library_file_names:
  library_file = c.get_source_file(library_file_name)
  library_file.add_include(get_dep('tclib').get_child('src', 'c'))
  library_file.add_include(get_dep('plankton').get_child('src', 'c'))
  library_file.add_include(get_root())
  object_file = library_file.get_object()
  library.add_member(object_file)

ctrino_file_names = [
  "main.cc"
]

# Build an executable from the library along with the main file.
ctrino = c.get_executable("ctrino")
for ctrino_file_name in ctrino_file_names:
  ctrino_file = c.get_source_file(ctrino_file_name)
  ctrino_file.add_include(get_dep('tclib').get_child('src', 'c'))
  ctrino_file.add_include(get_dep('plankton').get_child('src', 'c'))
  ctrino_file.add_include(get_root())
  ctrino.add_object(ctrino_file.get_object())
