# Copyright 2015 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

# Positional arguments.
def $pos($a, $b, $c, $d) => (1000000 * $a) + (10000 * $b) + (100 * $c) + $d;
def $cpos(*) as $args => $args.replace_argument(subject, $pos);
def $rpos(*) as $args => $args.replace_argument(subject, null);

# Keyword arguments.
def $kwd(a: $a, b: $b, c: $c, d: $d) => (1000000 * $a) + (10000 * $b) + (100 * $c) + $d;
def $ckwd(*) as $args => $args.replace_argument(subject, $kwd);
def $rkwd(*) as $args => $args.replace_argument(subject, null);

# Reverse keyword arguments.
def $rkw(d: $d, c: $c, b: $b, a: $a) => (1000000 * $d) + (10000 * $c) + (100 * $b) + $a;
def $crkw(*) as $args => $args.replace_argument(subject, $rkw);

def $test_direct_invoke() {
  $assert:equals(03040506, module.invoke($cpos(3, 4, 5, 6)));
  $assert:equals(07080910, module.invoke($cpos(0: 7, 1: 8, 2: 9, 3: 10)));
  $assert:equals(14131211, module.invoke($cpos(3: 11, 2: 12, 1: 13, 0: 14)));
  $assert:equals(17181516, module.invoke($cpos(2: 15, 3: 16, 0: 17, 1: 18)));

  $assert:equals(19202122, module.invoke($ckwd(19, 20, 21, 22)));
  $assert:equals(23242526, module.invoke($ckwd(0: 23, 1: 24, 2: 25, 3: 26)));
  $assert:equals(30292827, module.invoke($ckwd(3: 27, 2: 28, 1: 29, 0: 30)));
  $assert:equals(33343132, module.invoke($ckwd(2: 31, 3: 32, 0: 33, 1: 34)));
  $assert:equals(35363738, module.invoke($ckwd(a: 35, b: 36, c: 37, d: 38)));
  $assert:equals(39404142, module.invoke($ckwd(a: 39, 1: 40, 2: 41, d: 42)));
  $assert:equals(46454443, module.invoke($ckwd(d: 43, c: 44, b: 45, a: 46)));

  $assert:equals(47484950, module.invoke($crkw(47, 48, 49, 50)));
  $assert:equals(51525354, module.invoke($crkw(0: 51, 1: 52, 2: 53, 3: 54)));
  $assert:equals(58575655, module.invoke($crkw(3: 55, 2: 56, 1: 57, 0: 58)));
  $assert:equals(59606162, module.invoke($crkw(d: 59, c: 60, b: 61, a: 62)));
  $assert:equals(66656463, module.invoke($crkw(a: 63, b: 64, c: 65, d: 66)));
}

def ($a).blah($b) as $args => $args;
def ($a).rblah($b) as $args => $args.replace_argument(subject, null);

def $test_op_invoke() {
  $assert:equals(2, module.invoke((1 .blah 1).replace_argument(selector, op+())));
  $assert:equals(3, module.invoke((4 .blah 1).replace_argument(selector, op-())));
}

def $try_leave_value($v) =>
  try module.leave($v)
  on.rblah($v) => $v
  on($a, $b, $c, $d) => $pos($a, $b, $c, $d);

def $test_leave() {
  $assert:equals(18,
    try module.leave($rpos(3, 4, 5, 6))
    on($a, $b, $c, $d) => 18);
  $assert:equals(7080910,
    try module.leave($rpos(7, 8, 9, 10))
    on($a, $b, $c, $d) => $pos($a, $b, $c, $d));
  $assert:equals(11121314,
    try module.leave($rkwd(11, 12, 13, 14))
    on(a: $a, b: $b, c: $c, d: $d) => $pos($a, $b, $c, $d));
  $assert:equals(18171615,
    try module.leave($rkwd(15, 16, 17, 18))
    on(d: $d, c: $c, b: $b, a: $a) => $pos($a, $b, $c, $d));
  $assert:equals(27282930,
    try module.leave($rkwd(a: 27, b: 28, c: 29, d: 30))
    on(a: $a, b: $b, c: $c, d: $d) => $pos($a, $b, $c, $d));
  $assert:equals("y",
    try module.leave("x" .rblah "y")
    on.rblah($v) => $v);
  $assert:equals(19202122, $try_leave_value($rpos(19, 20, 21, 22)));
  $assert:equals(980, $try_leave_value("x" .rblah 980));
  $assert:equals(23242526,
    try $try_leave_value($rkwd(a: 23, b: 24, c: 25, d: 26))
    on(a: $a, b: $b, c: $c, d: $d) => $pos($a, $b, $c, $d));
}

do {
  $test_direct_invoke();
  $test_op_invoke();
  $test_leave();
}
