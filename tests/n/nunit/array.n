# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $collection;
import $core;

def $test_simple() {
  def $buf := (new @collection:Array());
  $assert:that($buf.is_empty?);
  $assert:equals(0, $buf.length);
  $assert:equals(null, $buf.add! 5);
  $assert:not($buf.is_empty?);
  $assert:equals(1, $buf.length);
  $assert:equals(5, $buf[0]);
  $assert:equals(1, try $buf[1] on.out_of_bounds($i) => $i);
  $assert:equals((-1), try $buf[-1] on.out_of_bounds($i) => $i);
  $assert:equals(6, $buf[0] := 6);
  $assert:equals(1, $buf.length);
  $assert:equals(6, $buf[0]);
  $assert:equals(1, try ($buf[1] := 4) on.out_of_bounds($i) => $i);
  $assert:equals((-1), try ($buf[-1] := 4) on.out_of_bounds($i) => $i);
  $buf.clear! ();
  $assert:that($buf.is_empty?);
  $assert:equals(0, $buf.length);
  for $i in (0).to(100) do {
    $assert:equals($i, $buf.length);
    $buf.add! $i;
  }
  for $i in (0).to(100)
    do $assert:equals($i, $buf[$i]);
  var $expected := 0;
  for $elm in $buf do {
    $assert:equals($expected, $elm);
    $expected := $expected + 1;
  }
  $assert:equals(100, $expected);
}

do {
  $test_simple();
}
