# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $test_simple_promise() {
  def $p := @core:Promise.pending();
  $assert:equals(false, $p.is_settled?);
  $assert:equals(18, try $p.get() on.promise_not_settled($q) => 18);
  $assert:equals(19, $p.fulfill!(19));
  $assert:equals(true, $p.is_settled?);
  $assert:equals(19, $p.get());
  $assert:equals(21, $p.fulfill!(21));
  $assert:equals(19, $p.get());
}

def $test_fail() {
  def $p := @core:Promise.defer(fn => leave.ouch!(a: 5, c: 2, b: 9));
  $p.on(fn.ouch!(a: $a, b: $b, c: $c) {
    $assert:equals(5, $a);
    $assert:equals(9, $b);
    $assert:equals(2, $c);
  });
}

def $defer($fn) => @core:Promise.defer($fn);

def $test_eventual() {
  $assert:equals(6, 5->successor);
  when def $s := 6->successor do $assert:equals(7, $s);
  when def $s := ($defer(fn => 7)->successor)->successor do $assert:equals(9, $s);
  $assert:equals(15, (10).+(5));
  $assert:equals(15, (10)->+(5));
  when def $v := $defer(fn => fn.abc($a, $b) => ($a + $b))->abc(7, 4) do $assert:equals(11, $v);
  when def $v := $defer(fn => fn($a, $b) => ($a + $b))->(8, 6) do $assert:equals(14, $v);
  when def $v := $defer(fn => ["x", "y"])->[0] do $assert:equals("x", $v);
}

def $test_join() {
  when def $v := @core:Promise.join []
    do $assert:equals([], $v);
  when def $v := @core:Promise.join [$defer(fn => 1)]
    do $assert:equals([1], $v);
  when def $v := @core:Promise.join [$defer(fn => "a"), $defer(fn => "b"), $defer(fn => "c")]
    do $assert:equals(["a", "b", "c"], $v);
}

do {
  $test_simple_promise();
  $test_fail();
  $test_eventual();
  $test_join();
}
