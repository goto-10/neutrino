# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;
import $meta;

def $test_simple() {
  def $s0 := @ctrino.new_hash_source(4097);
  def $b0 := new @meta:HashOracle($s0);
  # Setting hashes using a single oracle.
  def $o0 := @core:manager.new_instance(@core:Object);
  $assert:equals(null, $b0.peek_hash_code($o0));
  def $h0 := $b0.ensure_hash_code! $o0;
  $assert:equals($h0, $b0.peek_hash_code($o0));
  $assert:equals($h0, $b0.ensure_hash_code! $o0);
  def $o1 := @core:manager.new_instance(@core:Object);
  $assert:equals(null, $b0.peek_hash_code($o1));
  def $h1 := $b0.ensure_hash_code! $o1;
  $assert:equals($h1, $b0.peek_hash_code($o1));
  $assert:equals($h1, $b0.ensure_hash_code! $o1);
  $assert:not($h0 == $h1);
  def $o2 := @core:manager.new_instance(@core:Object);
  $assert:equals(null, $b0.peek_hash_code($o2));
  # Getting those hashes through another oracle.
  def $b1 := new @meta:HashOracle($s0);
  $assert:equals($h0, $b1.peek_hash_code($o0));
  $assert:equals($h1, $b1.peek_hash_code($o1));
  $assert:equals(null, $b1.peek_hash_code($o2));
  # Setting a hash through the other oracle, getting it through the first one.
  def $h2 := $b1.ensure_hash_code! $o2;
  $assert:equals($h2, $b1.peek_hash_code($o2));
  $assert:equals($h2, $b1.ensure_hash_code! $o2);
  $assert:equals($h2, $b0.peek_hash_code($o2));
  $assert:equals($h2, $b0.ensure_hash_code! $o2);
  # Freezing the second oracle, verifying that it stops receiving updates.
  $core:freeze($b1);
  $assert:equals($h0, $b1.peek_hash_code($o0));
  $assert:equals($h1, $b1.peek_hash_code($o1));
  $assert:equals($h2, $b1.peek_hash_code($o2));
  def $o3 := @core:manager.new_instance(@core:Object);
  def $h3 := $b0.ensure_hash_code! $o3;
  $assert:equals($h3, $b0.peek_hash_code($o3));
  $assert:equals($h3, $b0.ensure_hash_code! $o3);
  $assert:equals(null, $b1.peek_hash_code($o3));
  # Create a new source and check that it returns the same values even if the
  # objects are given in a different order.
  def $s1 := @ctrino.new_hash_source(4097);
  def $b10 := new @meta:HashOracle($s1);
  $assert:equals($h0, $b10.ensure_hash_code! $o3);
  $assert:equals($h1, $b10.ensure_hash_code! $o2);
  $assert:equals($h2, $b10.ensure_hash_code! $o1);
  $assert:equals($h3, $b10.ensure_hash_code! $o0);
  $assert:equals($h0, $b0.ensure_hash_code! $o0);
  $assert:equals($h1, $b0.ensure_hash_code! $o1);
  $assert:equals($h2, $b0.ensure_hash_code! $o2);
  $assert:equals($h3, $b0.ensure_hash_code! $o3);
  ## Create a source with a different seed and check that it returns all
  ## different values.
  def $s2 := @ctrino.new_hash_source(4098);
  def $b20 := new @meta:HashOracle($s1);
  $assert:not($h0 == ($b20.ensure_hash_code! $o0));
  $assert:not($h1 == ($b20.ensure_hash_code! $o1));
  $assert:not($h2 == ($b20.ensure_hash_code! $o2));
  $assert:not($h3 == ($b20.ensure_hash_code! $o3));
}

def $test_global() {
  def $b0 := new @meta:HashOracle();
  def $o0 := @core:manager.new_instance(@core:Object);
  $assert:equals(null, $b0.peek_hash_code($o0));
  def $h0 := $b0.ensure_hash_code! $o0;
  $assert:equals($h0, $b0.peek_hash_code($o0));
  $assert:equals($h0, $b0.ensure_hash_code! $o0);
}

do {
  $test_simple();
  $test_global();
}
