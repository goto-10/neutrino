# Copyright 2015 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def $positional($a, $b, $c) as $args => $args;
def $keyword(a: $a, b: $b, c: $c) as $args => $args;
def $rkeyword(c: $a, b: $b, a: $c) as $args => $args;

def $test_positional() {
  # Positional, default order.
  def $p0 := $positional(5, 6, 7);
  $assert:equals($positional, $p0[subject]);
  $assert:equals(op(), $p0[selector]);
  $assert:equals(sync, $p0[transport]);
  $assert:equals(5, $p0[0]);
  $assert:equals(6, $p0[1]);
  $assert:equals(7, $p0[2]);
  # Positional, force reverse arg order.
  def $p1 := $positional(2: 8, 1: 9, 0: 10);
  $assert:equals($positional, $p1[subject]);
  $assert:equals(op(), $p1[selector]);
  $assert:equals(sync, $p1[transport]);
  $assert:equals(10, $p1[0]);
  $assert:equals(9, $p1[1]);
  $assert:equals(8, $p1[2]);
  # Positional, force mixed arg order.
  def $p2 := $positional(1: 11, 2: 12, 0: 13);
  $assert:equals($positional, $p2[subject]);
  $assert:equals(op(), $p2[selector]);
  $assert:equals(sync, $p2[transport]);
  $assert:equals(13, $p2[0]);
  $assert:equals(11, $p2[1]);
  $assert:equals(12, $p2[2]);
}

def $test_keyword() {
  def $k0 := $keyword(14, 15, 16);
  $assert:equals($keyword, $k0[subject]);
  $assert:equals(op(), $k0[selector]);
  $assert:equals(sync, $k0[transport]);
  $assert:equals(14, $k0[0]);
  $assert:equals(15, $k0[1]);
  $assert:equals(16, $k0[2]);
  $assert:equals(14, $k0["a"]);
  $assert:equals(15, $k0["b"]);
  $assert:equals(16, $k0["c"]);
  def $k1 := $keyword(a: 17, b: 18, c: 19);
  $assert:equals($keyword, $k1[subject]);
  $assert:equals(op(), $k1[selector]);
  $assert:equals(sync, $k1[transport]);
  $assert:equals(17, $k1[0]);
  $assert:equals(18, $k1[1]);
  $assert:equals(19, $k1[2]);
  $assert:equals(17, $k1["a"]);
  $assert:equals(18, $k1["b"]);
  $assert:equals(19, $k1["c"]);
  def $k2 := $keyword(c: 23, a: 24, b: 25);
  $assert:equals($keyword, $k2[subject]);
  $assert:equals(op(), $k2[selector]);
  $assert:equals(sync, $k2[transport]);
  $assert:equals(24, $k2[0]);
  $assert:equals(25, $k2[1]);
  $assert:equals(23, $k2[2]);
  $assert:equals(24, $k2["a"]);
  $assert:equals(25, $k2["b"]);
  $assert:equals(23, $k2["c"]);
}

def $test_rkeyword() {
  def $r0 := $rkeyword(14, 15, 16);
  $assert:equals($rkeyword, $r0[subject]);
  $assert:equals(op(), $r0[selector]);
  $assert:equals(sync, $r0[transport]);
  $assert:equals(14, $r0[0]);
  $assert:equals(15, $r0[1]);
  $assert:equals(16, $r0[2]);
  $assert:equals(16, $r0["a"]);
  $assert:equals(15, $r0["b"]);
  $assert:equals(14, $r0["c"]);
  def $r1 := $rkeyword(a: 17, b: 18, c: 19);
  $assert:equals($rkeyword, $r1[subject]);
  $assert:equals(sync, $r1[transport]);
  $assert:equals(op(), $r1[selector]);
  $assert:equals(19, $r1[0]);
  $assert:equals(18, $r1[1]);
  $assert:equals(17, $r1[2]);
  $assert:equals(17, $r1["a"]);
  $assert:equals(18, $r1["b"]);
  $assert:equals(19, $r1["c"]);
  def $r2 := $rkeyword(c: 23, a: 24, b: 25);
  $assert:equals($rkeyword, $r2[subject]);
  $assert:equals(op(), $r2[selector]);
  $assert:equals(sync, $r2[transport]);
  $assert:equals(23, $r2[0]);
  $assert:equals(25, $r2[1]);
  $assert:equals(24, $r2[2]);
  $assert:equals(24, $r2["a"]);
  $assert:equals(25, $r2["b"]);
  $assert:equals(23, $r2["c"]);
}

def $extra(*) as $args => $args;

def $test_extra() {
  def $e0 := $extra(40, 41, 42);
  $assert:equals($extra, $e0[subject]);
  $assert:equals(op(), $e0[selector]);
  $assert:equals(sync, $e0[transport]);
  $assert:equals(40, $e0[0]);
  $assert:equals(41, $e0[1]);
  $assert:equals(42, $e0[2]);
  def $e1 := $extra(a: 43, b: 44, c: 45);
  $assert:equals($extra, $e1[subject]);
  $assert:equals(op(), $e1[selector]);
  $assert:equals(sync, $e1[transport]);
  $assert:equals(43, $e1["a"]);
  $assert:equals(44, $e1["b"]);
  $assert:equals(45, $e1["c"]);
  def $e2 := $extra(2: 46, 1: 47, 0: 48);
  $assert:equals($extra, $e2[subject]);
  $assert:equals(op(), $e2[selector]);
  $assert:equals(sync, $e2[transport]);
  $assert:equals(48, $e2[0]);
  $assert:equals(47, $e2[1]);
  $assert:equals(46, $e2[2]);
}

def $reverse(2: $a, 1: $b, 0: $c) as $args => $args;

def $test_reverse() {
  def $r0 := $reverse(50, 51, 52);
  $assert:equals($reverse, $r0[subject]);
  $assert:equals(op(), $r0[selector]);
  $assert:equals(sync, $r0[transport]);
  $assert:equals(50, $r0[0]);
  $assert:equals(51, $r0[1]);
  $assert:equals(52, $r0[2]);
  def $r1 := $reverse(2: 53, 1: 54, 0: 55);
  $assert:equals($reverse, $r1[subject]);
  $assert:equals(op(), $r1[selector]);
  $assert:equals(sync, $r1[transport]);
  $assert:equals(55, $r1[0]);
  $assert:equals(54, $r1[1]);
  $assert:equals(53, $r1[2]);
  def $r2 := $reverse(1: 56, 2: 57, 0: 58);
  $assert:equals($reverse, $r2[subject]);
  $assert:equals(op(), $r2[selector]);
  $assert:equals(sync, $r2[transport]);
  $assert:equals(58, $r2[0]);
  $assert:equals(56, $r2[1]);
  $assert:equals(57, $r2[2]);
}

def $test_failures() {
  def $k := $keyword(20, 21, 22);
  $assert:equals("d", try $k["d"] on.no_such_tag($t) => $t);
  $assert:equals(4, try $k[4] on.no_such_tag($t) => $t);
  $assert:equals("d", try $k.replace_argument("d", 0) on.no_such_tag($t) => $t);
  $assert:equals(4, try $k.replace_argument(4, 0) on.no_such_tag($t) => $t);
  def $e := $extra(23, 24, 25);
  $assert:equals(4, try $e[4] on.no_such_tag($t) => $t);
  $assert:equals(4, try $e.replace_argument(4, 0) on.no_such_tag($t) => $t);
}

def $test_replace() {
  def $k0 := $keyword(60, 61, 62);
  $assert:equals($keyword, $k0[subject]);
  $assert:equals(op(), $k0[selector]);
  $assert:equals(sync, $k0[transport]);
  $assert:equals(60, $k0[0]);
  $assert:equals(61, $k0[1]);
  $assert:equals(62, $k0[2]);
  $assert:equals(60, $k0["a"]);
  $assert:equals(61, $k0["b"]);
  $assert:equals(62, $k0["c"]);
  def $k1 := $k0.replace_argument(subject, $reverse);
  $assert:equals($reverse, $k1[subject]);
  $assert:equals(op(), $k1[selector]);
  $assert:equals(sync, $k1[transport]);
  $assert:equals(60, $k1[0]);
  $assert:equals(61, $k1[1]);
  $assert:equals(62, $k1[2]);
  $assert:equals(60, $k1["a"]);
  $assert:equals(61, $k1["b"]);
  $assert:equals(62, $k1["c"]);
  def $k2 := $k1.replace_argument(0, 63);
  $assert:equals($reverse, $k2[subject]);
  $assert:equals(op(), $k2[selector]);
  $assert:equals(sync, $k2[transport]);
  $assert:equals(63, $k2[0]);
  $assert:equals(61, $k2[1]);
  $assert:equals(62, $k2[2]);
  $assert:equals(63, $k2["a"]);
  $assert:equals(61, $k2["b"]);
  $assert:equals(62, $k2["c"]);
  def $k3 := $k2.replace_argument("c", 64);
  $assert:equals($reverse, $k3[subject]);
  $assert:equals(op(), $k3[selector]);
  $assert:equals(sync, $k3[transport]);
  $assert:equals(63, $k3[0]);
  $assert:equals(61, $k3[1]);
  $assert:equals(64, $k3[2]);
  $assert:equals(63, $k3["a"]);
  $assert:equals(61, $k3["b"]);
  $assert:equals(64, $k3["c"]);
}

def $test_catch_reify() {
  var $args := null;
  try {
    leave.nirk(1, 2, 3);
  } on(*) as $a {
    $args := $a;
  }
  $assert:equals(null, $args[subject]);
  $assert:equals(op.nirk, $args[selector]);
  $assert:equals(sync, $args[transport]);
  $assert:equals(1, $args[0]);
  $assert:equals(2, $args[1]);
  $assert:equals(3, $args[2]);
}

do {
  $test_positional();
  $test_keyword();
  $test_rkeyword();
  $test_failures();
  $test_extra();
  $test_reverse();
  $test_replace();
  $test_catch_reify();
}
