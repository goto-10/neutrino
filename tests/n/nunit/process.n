# Copyright 2015 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

# Utility that makes it simpler (ideally) to create and run a test process.
type @ProcessHelper {

  field $this.process;
  field $this.stdout;
  field $this.stderr;
  field $this.stdin;

  def $this.start! => $this.process.start!;

  def $this.exit_code => $this.process.exit_code;

}

def ($This == @ProcessHelper).new($process) {
  def $this := @core:manager.new_instance(@ProcessHelper);
  $this.process := $process;
  $this.stdout := (new @core:io:Pipe());
  $this.stderr := (new @core:io:Pipe());
  $this.stdin := (new @core:io:Pipe());
  $this.process.stdout := $this.stdout;
  $this.process.stderr := $this.stderr;
  $this.process.stdin := $this.stdin;
  $this;
}

# Wrapper that keeps state for all the process tests.
type @ProcessTest {

  field $this.durian_main;

  def $this.run() {
    $this.test_simple();
    $this.test_echo();
  }

  def $this.new_process($args) {
    def $process := new (@core:io:Process)();
    $process.executable := $this.durian_main;
    $process.arguments := $args;
    new @ProcessHelper($process);
  }

  def $this.test_simple() {
    def $p := $this.new_process ["--quiet", "--exit-code", "99"];
    $p.start!;
    when def $exit_code := $p.exit_code
      do $assert:equals(99, $exit_code);
  }

  def $this.test_echo() {
    def $p := $this.new_process ["--quiet", "--echo-stdin"];
    $p.start!;
    # Write a message to stdin and then close so the program will terminate.
    when def $written := $p.stdin.out.write!("Hello, World!".view(@core:Ascii)) do {
      $assert:equals(13, $written);
      $p.stdin.out.close!;
    }
    # Read the message back from stderr.
    when def $blob := $p.stderr.in.read!(13) do {
      def $str := @core:Ascii.string_from($blob);
      $assert:equals("Hello, World!", $str);
    }
  }

}

def ($This == @ProcessTest).new($durian_main) {
  def $this := @core:manager.new_instance(@ProcessTest);
  $this.durian_main := $durian_main;
  $this;
}

def $test_all() {
  when def $durian_main := @core:ctrino.get_environment_variable("DURIAN_MAIN")
    do (new @ProcessTest($durian_main)).run();
}

do {
  $test_all();
}
