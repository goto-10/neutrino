# Copyright 2013 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

def @manager := @ctrino.new_instance_manager(null);
def @Point := module.new_type("Point");
def @x := module.new_hard_field("x");
def @y := module.new_hard_field("y");
def @a := module.new_soft_field("a");
def @b := module.new_soft_field("b");

def $test_hard_field_access() {
  def $p := @manager.new_instance(@Point);
  @x[$p] := 0;
  @y[$p] := 0;
  $assert:equals(0, @x[$p]);
  $assert:equals(0, @y[$p]);
  @x[$p] := 1;
  $assert:equals(1, @x[$p]);
  $assert:equals(0, @y[$p]);
  @y[$p] := 2;
  $assert:equals(1, @x[$p]);
  $assert:equals(2, @y[$p]);
  $core:freeze($p);
  $assert:equals(["x", $p], try @x[$p] := 3 on.changing_frozen($k, $i) => [$k, $i]);
  $assert:equals(["y", $p], try @y[$p] := 4 on.changing_frozen($k, $i) => [$k, $i]);
  $assert:equals(1, @x[$p]);
  $assert:equals(2, @y[$p]);
}

def $test_soft_field_access() {
  def $p := @manager.new_instance(@Point);
  @a[$p] := 0;
  @b[$p] := 0;
  $assert:equals(0, @a[$p]);
  $assert:equals(0, @b[$p]);
  @a[$p] := 1;
  $assert:equals(1, @a[$p]);
  $assert:equals(0, @b[$p]);
  @b[$p] := 2;
  $assert:equals(1, @a[$p]);
  $assert:equals(2, @b[$p]);
  $core:freeze($p);
  $assert:equals(3, @a[$p] := 3);
  $assert:equals(4, @b[$p] := 4);
  $assert:equals(3, @a[$p]);
  $assert:equals(4, @b[$p]);
}

def ($this).a => @a[$this];
def ($this).a := ($v) => @a[$this] := $v;

def $test_soft_field_primitives() {
  $assert:equals(["a", 5], try @a[5] on.no_such_field($k, $i) => [$k, $i]);
  @a[5] := "what?";
  $assert:equals("what?", @a[5]);
  $assert:equals("what?", @a[1 + 1 + 1 + 1 + 1]);
  $assert:equals("what?", (5).a);
  $assert:equals(["a", "5"], try @a["5"] on.no_such_field($k, $i) => [$k, $i]);
  @a["5"] := "what?!?";
  $assert:equals("what?!?", @a["5"]);
  $assert:equals("what?", @a[5]);
  $assert:equals("what?!?", "5".a);
  $assert:equals("what?", (5).a);
  "5".a := "tahw";
  (5).a := "----";
  $assert:equals("tahw", @a["5"]);
  $assert:equals("----", @a[5]);
  $assert:equals("tahw", "5".a);
  $assert:equals("----", (5).a);
}

def ($this is @Point).x => @x[$this];
def ($this is @Point).x := ($v) => @x[$this] := $v;
def ($this is @Point).y => @y[$this];
def ($this is @Point).y := ($v) => @y[$this] := $v;

def $test_field_accessors() {
  def $p := @manager.new_instance(@Point);
  $p.x := 0;
  $p.y := 0;
  $assert:equals(0, $p.x);
  $assert:equals(0, $p.y);
  $p.x := 1;
  $assert:equals(1, $p.x);
  $assert:equals(0, $p.y);
  $p.y := 2;
  $assert:equals(1, $p.x);
  $assert:equals(2, $p.y);
}

def ($this == @Point).new(x: $x, y: $y) {
  def $result := @manager.new_instance($this);
  $result.x := $x;
  $result.y := $y;
  $result;
}

def $test_constructor() {
  def $p0 := new @Point(10, 11);
  $assert:equals(10, $p0.x);
  $assert:equals(11, $p0.y);
  def $p1 := new @Point(x: 3, y: 4);
  $assert:equals(3, $p1.x);
  $assert:equals(4, $p1.y);
  def $p2 := new @Point(y: 32, x: 35);
  $assert:equals(35, $p2.x);
  $assert:equals(32, $p2.y);
}

type @Pair;

field ($this is @Pair).first;
field ($this is @Pair).second;

def $test_field_declarations() {
  def $p := @manager.new_instance(@Pair);
  $assert:equals(10, try $p.first on.no_such_field($k, $i) => 10);
  $assert:equals(11, try $p.second on.no_such_field($k, $i) => 11);
  $p.first := 8;
  $assert:equals(8, $p.first);
  $assert:equals(12, try $p.second on.no_such_field($k, $i) => 12);
  $p.second := 9;
  $assert:equals(8, $p.first);
  $assert:equals(9, $p.second);
}

do {
  $test_hard_field_access();
  $test_soft_field_access();
  $test_soft_field_primitives();
  $test_field_accessors();
  $test_constructor();
  $test_field_declarations();
}
