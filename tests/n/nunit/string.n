# Copyright 2014 the Neutrino authors (see AUTHORS).
# Licensed under the Apache License, Version 2.0 (see LICENSE).

import $assert;
import $core;

## Converts a one-character string into an ascii character.
def $a($s) {
  def $view := $s.view(@core:Ascii);
  $assert:equals(1, $view.length);
  $view[0];
}

def $test_ascii_view() {
  def $chars := "hello!".view(@core:Ascii);
  $assert:equals(6, $chars.length);
  $assert:equals($a("h"), $chars[0]);
  $assert:equals($a("e"), $chars[1]);
  $assert:equals($a("l"), $chars[2]);
  $assert:equals($a("l"), $chars[3]);
  $assert:equals($a("o"), $chars[4]);
  $assert:equals($a("!"), $chars[5]);
}

def $test_ascii_chars() {
  $assert:that($a("a") == $a("a"));
  $assert:not($a("a") == $a("b"));
  $assert:equals(97, $a("a").ordinal);
  $assert:equals(65, $a("A").ordinal);
  $assert:equals(48, $a("0").ordinal);
  $assert:equals(32, $a(" ").ordinal);
  $assert:equals(37, $a("%").ordinal);
  $assert:equals(10, $a("\n").ordinal);
  $assert:equals(13, $a("\r").ordinal);
  $assert:equals(92, $a("\\").ordinal);
  $assert:equals($a("a"), @core:AsciiCharacter.from_ordinal(97));
  $assert:equals($a("A"), @core:AsciiCharacter.from_ordinal(65));
  $assert:equals($a("0"), @core:AsciiCharacter.from_ordinal(48));
  $assert:equals($a(" "), @core:AsciiCharacter.from_ordinal(32));
  $assert:equals($a("%"), @core:AsciiCharacter.from_ordinal(37));

  $assert:equals(false, $a("A") < $a("A"));
  $assert:equals(true, $a("A") < $a("B"));
  $assert:equals(true, $a("A") < $a("C"));
  $assert:equals(false, $a("B") < $a("A"));
  $assert:equals(false, $a("B") < $a("B"));
  $assert:equals(true, $a("B") < $a("C"));
  $assert:equals(false, $a("C") < $a("A"));
  $assert:equals(false, $a("C") < $a("B"));
  $assert:equals(false, $a("C") < $a("C"));

  $assert:equals(true, $a("A") <= $a("A"));
  $assert:equals(true, $a("A") <= $a("B"));
  $assert:equals(true, $a("A") <= $a("C"));
  $assert:equals(false, $a("B") <= $a("A"));
  $assert:equals(true, $a("B") <= $a("B"));
  $assert:equals(true, $a("B") <= $a("C"));
  $assert:equals(false, $a("C") <= $a("A"));
  $assert:equals(false, $a("C") <= $a("B"));
  $assert:equals(true, $a("C") <= $a("C"));
}

def $test_ctype() {
  $assert:that($a("a").is_lower_case?);
  $assert:not($a("A").is_lower_case?);
  $assert:not($a("%").is_lower_case?);
  $assert:not($a("3").is_lower_case?);
  $assert:not($a(" ").is_lower_case?);

  $assert:not($a("a").is_upper_case?);
  $assert:that($a("A").is_upper_case?);
  $assert:not($a("%").is_upper_case?);
  $assert:not($a("3").is_upper_case?);
  $assert:not($a(" ").is_upper_case?);

  $assert:that($a("a").is_alphabetic?);
  $assert:that($a("A").is_alphabetic?);
  $assert:not($a("%").is_alphabetic?);
  $assert:not($a("3").is_alphabetic?);
  $assert:not($a(" ").is_alphabetic?);

  $assert:not($a("a").is_digit?);
  $assert:not($a("A").is_digit?);
  $assert:not($a("%").is_digit?);
  $assert:that($a("3").is_digit?);
  $assert:not($a(" ").is_digit?);

  $assert:not($a("a").is_whitespace?);
  $assert:not($a("A").is_whitespace?);
  $assert:not($a("%").is_whitespace?);
  $assert:not($a("3").is_whitespace?);
  $assert:that($a(" ").is_whitespace?);
}

def $test_substring() {
  def $fbb := "foo bar baz".view(@core:Ascii);
  $assert:equals("foo", $fbb.substring(0, 3));
  $assert:equals("bar", $fbb.substring(4, 7));
  $assert:equals("baz", $fbb.substring(8, 11));
  $assert:equals("foo bar baz", $fbb.substring(-100, 100));
}

def $run_split_test($str, $parts) {
  $assert:equals($parts, $str.view(@core:Ascii).split_lines);
}

def $test_split() {
  $run_split_test("", []);
  $run_split_test("a", ["a"]);
  $run_split_test("a\n", ["a", ""]);
  $run_split_test("a\nb", ["a", "b"]);
  $run_split_test("a\nb\n", ["a", "b", ""]);
  $run_split_test("a\nb\nc", ["a", "b", "c"]);
  $run_split_test("a\n\n\nb", ["a", "", "", "b"]);
  $run_split_test("a\r", ["a", ""]);
  $run_split_test("a\rb", ["a", "b"]);
  $run_split_test("a\rb\r", ["a", "b", ""]);
  $run_split_test("a\rb\rc", ["a", "b", "c"]);
  $run_split_test("a\r\r\rb", ["a", "", "", "b"]);
  $run_split_test("a\r\nb", ["a", "b"]);
  $run_split_test("a\r\nb\r\n", ["a", "b", ""]);
  $run_split_test("a\r\nb\r\nc", ["a", "b", "c"]);
  $run_split_test("a\r\n\r\n\r\nb", ["a", "", "", "b"]);
  $run_split_test("a\n\rb", ["a", "", "b"]);
}

def $run_scanf_test($fmt, $input, $expected) {
  $assert:equals($expected, $input.view(@core:Ascii).scanf($fmt));
}

def $run_scanf_invalid_test($fmt) {
  $assert:equals($fmt, try {"blah".view(@core:Ascii).scanf($fmt); null;} on.invalid_scanf_format($v) => $v);
}

def $test_scanf() {
  $run_scanf_test("%i %i %i", "123 456 789", [123, 456, 789]);
  $run_scanf_test("%i %i %i", "123 456 789", [123, 456, 789]);
  $run_scanf_test("%8s %i %i", "123 456 789", ["123", 456, 789]);
  $run_scanf_test("%8s %8s %i", "123 456 789", ["123", "456", 789]);
  $run_scanf_test("%8s %8s %8s", "123 456 789", ["123", "456", "789"]);
  $run_scanf_test("%8[a]%8[b]%8[c]", "aaabbbbbccccccc", ["aaa", "bbbbb", "ccccccc"]);
  $run_scanf_test("%*8s %8s %8s", "123 456 789", ["456", "789"]);
  $run_scanf_test("%8s %*8s %8s", "123 456 789", ["123", "789"]);
  $run_scanf_test("%8s %8s %*8s", "123 456 789", ["123", "456"]);
  $run_scanf_test("%4[%]", "%%%---", ["%%%"]);
  $run_scanf_test("%4[[]", "[[[---", ["[[["]);
  $run_scanf_test("%4[]]", "]]]---", ["]]]"]);
  $run_scanf_test("%4[^]]", "abc]]]", ["abc"]);
  $run_scanf_test("%4[^]]", "abc^^^", ["abc^"]);
  $run_scanf_test("%4[^^]", "abc^^^", ["abc"]);
  $run_scanf_test("%4s%4s", "12345678", ["1234", "5678"]);
  $run_scanf_test("%d", "45645", [45645]);
  $run_scanf_test("%d", "00045645", [45645]);
  $run_scanf_test("%d", "-45645", [0-45645]);
  $run_scanf_test("%i", "-45645", [0-45645]);
  $run_scanf_test("%x", "fade", [64222]);
  $run_scanf_test("%x", "FADE", [64222]);
  $run_scanf_test("%%", "%", []);
  $run_scanf_test("foo %x bar", "foo 123 bar", [291]);
  $run_scanf_test("foo %x bar", "foo 123 bar blah fbo", [291]);
  $run_scanf_test("foo %x bar", "fo 123 bar", null);
  $run_scanf_invalid_test("%s");
  $run_scanf_invalid_test("%o");
  $run_scanf_invalid_test("%u");
  $run_scanf_invalid_test("%n");
  $run_scanf_invalid_test("%e");
  $run_scanf_invalid_test("%f");
  $run_scanf_invalid_test("%g");
  $run_scanf_invalid_test("%p");
  $run_scanf_invalid_test("%hi");
  $run_scanf_invalid_test("%li");
  $run_scanf_invalid_test("%Li");
  $run_scanf_invalid_test("%");
  $run_scanf_invalid_test("%4[");
  $run_scanf_invalid_test("%i %i %i %i %i");
}

do {
  $test_ascii_view();
  $test_ascii_chars();
  $test_ctype();
  $test_substring();
  $test_split();
  $test_scanf();
}
